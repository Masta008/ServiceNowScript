//Step one : Presented the result Script from ServiceNow after the run of Instance Scan

++Communitation with ChatGPT++

//User 
//Please program a JavaScript script solution for the following ServiceNow request:
//ServiceNow Field: "Description"
Having many Cross Privileges in a custom application, might be an indication that during development these Cross Scope privileges were added unintentionally.

//ServiceNow Field: "Resolution Details"
Recommendation is to investigate each Cross Scope privilege and identify whether this is really needed as part of the application. If not remove the privilege.
Removing privileges might require regression testing to ensure that nothing will break. The extend of testing will depend on the Application size.

//Answer
To create a JavaScript script to identify and investigate Cross Scope privileges in ServiceNow, you can use the GlideAggregate class to query the 'sys_scope' table and 'sys_scope_has_role' table to gather information about the privileges. You can then display or log the results to help you make a decision about whether to remove them. Here's a sample script to get you started:

// Create a new GlideAggregate query on the 'sys_scope' table.
var crossScopePrivileges = new GlideAggregate('sys_scope');
crossScopePrivileges.addQuery('type', '!=', '3'); // Exclude Global scope
crossScopePrivileges.addAggregate('COUNT', 'sys_scope_has_role.role');
crossScopePrivileges.groupBy('name');
crossScopePrivileges.query();

// Loop through the cross scope privileges.
while (crossScopePrivileges.next()) {
  var scopeName = crossScopePrivileges.getValue('name');
  var roleCount = parseInt(crossScopePrivileges.getAggregate('COUNT', 'sys_scope_has_role.role'));

  gs.info('Cross Scope Privilege: ' + scopeName);
  gs.info('Roles with access: ' + roleCount);

  // You can add logic here to decide if this privilege should be removed or not.
  // For example, you can check the 'roleCount' and the size of your application.

  if (roleCount > 0) {
    gs.info('This privilege is in use. Consider regression testing.');
  } else {
    // If you decide to remove the privilege, you can use the following code.
    // Uncomment and use with caution!
    /*
    var scopeGR = new GlideRecord('sys_scope');
    if (scopeGR.get('name', scopeName)) {
      scopeGR.deleteRecord();
      gs.info('Privilege ' + scopeName + ' has been removed.');
    }
    */
  }
}

// Please be cautious when using the deletion code above.
// It is commented out to prevent accidental removal of privileges.
In this script:

We query the 'sys_scope' table to find all non-global (type 3) scopes, which are custom application scopes.
We aggregate the number of roles that have access to each scope.
We loop through the results, displaying the scope name and the number of roles with access.
You can add your custom logic to decide whether to remove a privilege based on the 'roleCount' and the size of your application.
Remember to be cautious when removing privileges, as this can have a significant impact on your application. Always perform thorough testing and consider the implications before removing any privileges.
